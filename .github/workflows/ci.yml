name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pf_testbed_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt
        pip install -r testbed/tools/requirements.txt
    
    - name: Run linting
      run: |
        npm run lint
        npm run format:check
    
    - name: Run tests
      run: |
        npm test
        pytest testbed/tools/reporter/ --cov
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        npm run security:test
    
    - name: Run dependency check
      run: |
        npm run deps:check
        pip-audit -r requirements.txt

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and test Docker images
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose logs
    
    - name: Test Docker health
      run: |
        curl -f http://localhost:3003/health || exit 1
        curl -f http://localhost:3001/health || exit 1
        curl -f http://localhost:3002/health || exit 1
        curl -f http://localhost:3100/api/health || exit 1
        curl -f http://localhost:9090/-/healthy || exit 1
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v
