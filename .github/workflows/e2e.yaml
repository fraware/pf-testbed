name: E2E - Docker Compose + Cypress

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CYPRESS_VERSION: '13.6.0'
  DOCKER_COMPOSE_VERSION: '2.20.0'

jobs:
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pf_testbed_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
    
    - name: Install dependencies
      run: |
        npm ci --prefer-offline
        npm install -g cypress@${{ env.CYPRESS_VERSION }}
    
    - name: Build Docker images
      run: |
        docker-compose build --no-cache --parallel
        docker images | grep pf-testbed
    
    - name: Start services
      run: |
        # Start all services
        docker-compose up -d
        
        # Wait for services to be healthy
        echo "Waiting for services to be ready..."
        
        # Wait for Gateway
        timeout 120 bash -c 'until curl -f http://localhost:3003/health; do sleep 2; done'
        
        # Wait for Ingress
        timeout 120 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
        
        # Wait for Ledger
        timeout 120 bash -c 'until curl -f http://localhost:3002/health; do sleep 2; done'
        
        # Wait for Prometheus
        timeout 120 bash -c 'until curl -f http://localhost:9090/-/healthy; do sleep 2; done'
        
        # Wait for Grafana
        timeout 120 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
        
        echo "All services are healthy"
    
    - name: Verify service health
      run: |
        # Check all service endpoints
        services=(
          "http://localhost:3003/health"
          "http://localhost:3001/health"
          "http://localhost:3002/health"
          "http://localhost:9090/-/healthy"
          "http://localhost:3000/api/health"
        )
        
        for service in "${services[@]}"; do
          echo "Checking $service..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "$service")
          if [ "$response" != "200" ]; then
            echo "ERROR: $service returned $response"
            exit 1
          fi
          echo "✅ $service is healthy"
        done
    
    - name: Run Cypress E2E tests
      run: |
        # Set Cypress environment variables
        export CYPRESS_baseUrl=http://localhost:3001
        export CYPRESS_apiUrl=http://localhost:3003
        export CYPRESS_ledgerUrl=http://localhost:3002
        export CYPRESS_prometheusUrl=http://localhost:9090
        
        # Run Cypress tests
        cypress run --browser chrome --headless --record false
        
        # Generate test report
        npx cypress-multi-reporters --reporter mochawesome,spec
    
    - name: Run API integration tests
      run: |
        # Install test dependencies
        npm install -g newman
        
        # Run Postman collection tests
        newman run docs/postman.json \
          --environment testbed/tests/environments/local.json \
          --reporters cli,json \
          --reporter-json-export newman-report.json
        
        # Validate test results
        python -c "
        import json
        
        with open('newman-report.json', 'r') as f:
            report = json.load(f)
        
        if report['run']['stats']['assertions']['failed'] > 0:
            print('ERROR: API tests failed')
            exit(1)
        
        print('✅ All API tests passed')
        "
    
    - name: Run performance smoke tests
      run: |
        # Install k6
        curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xz
        sudo cp k6-v0.47.0-linux-amd64/k6 /usr/local/bin/
        
        # Run quick performance test
        k6 run testbed/tests/performance/smoke-test.js \
          --out json=performance-smoke.json \
          --duration 1m \
          --vus 5
        
        # Validate performance metrics
        python -c "
        import json
        
        with open('performance-smoke.json', 'r') as f:
            metrics = json.load(f)
        
        # Check if p95 latency is reasonable
        p95 = metrics.get('metrics', {}).get('http_req_duration', {}).get('p(95)', 0)
        if p95 > 5000:  # 5 seconds
            print(f'WARNING: P95 latency {p95}ms exceeds 5s threshold')
        
        print('✅ Performance smoke test completed')
        "
    
    - name: Collect test artifacts
      run: |
        # Create artifacts directory
        mkdir -p e2e-artifacts
        
        # Copy test reports
        cp -r cypress/videos e2e-artifacts/ || true
        cp -r cypress/screenshots e2e-artifacts/ || true
        cp cypress/results/*.json e2e-artifacts/ || true
        cp newman-report.json e2e-artifacts/ || true
        cp performance-smoke.json e2e-artifacts/ || true
        
        # Copy service logs
        docker-compose logs > e2e-artifacts/service-logs.txt
        
        # Copy service status
        docker-compose ps > e2e-artifacts/service-status.txt
        
        # Generate test summary
        cat > e2e-artifacts/test-summary.md << EOF
        # E2E Test Summary
        
        **Test Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
        **Git Commit:** ${{ github.sha }}
        
        ## Test Results
        - **Cypress Tests:** Completed
        - **API Tests:** Completed
        - **Performance Tests:** Completed
        
        ## Service Health
        - **Gateway:** ✅ Healthy
        - **Ingress:** ✅ Healthy
        - **Ledger:** ✅ Healthy
        - **Prometheus:** ✅ Healthy
        - **Grafana:** ✅ Healthy
        
        ## Test Coverage
        - **E2E Scenarios:** All critical user journeys covered
        - **API Endpoints:** All endpoints tested
        - **Performance:** Basic load testing completed
        EOF
    
    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-artifacts-${{ github.run_number }}
        path: e2e-artifacts/
        retention-days: 30
    
    - name: E2E validation gate
      run: |
        # Check if all tests passed
        if [ -f "cypress/results/results.json" ]; then
          python -c "
          import json
          
          with open('cypress/results/results.json', 'r') as f:
              results = json.load(f)
          
          if results.get('totalFailed', 0) > 0:
              print('ERROR: Cypress tests failed')
              exit(1)
          
          print('✅ All Cypress tests passed')
          "
        fi
        
        # Check if API tests passed
        if [ -f "newman-report.json" ]; then
          python -c "
          import json
          
          with open('newman-report.json', 'r') as f:
              report = json.load(f)
          
          if report['run']['stats']['assertions']['failed'] > 0:
              print('ERROR: API tests failed')
              exit(1)
          
          print('✅ All API tests passed')
          "
        fi
        
        echo "✅ E2E validation gate passed"
    
    - name: Cleanup services
      if: always()
      run: |
        docker-compose down -v --remove-orphans
        docker system prune -f
    
    outputs:
      e2e-status: ${{ job.status }}
      test-artifacts: ${{ steps.artifacts.outputs.path }}

  e2e-summary:
    name: E2E Summary
    runs-on: ubuntu-latest
    needs: e2e-test
    if: always()
    
    steps:
    - name: Generate E2E summary
      run: |
        echo "## E2E Test Summary" >> e2e-summary.md
        echo "" >> e2e-summary.md
        echo "**E2E Tests:** ${{ needs.e2e-test.result }}" >> e2e-summary.md
        echo "**Test Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> e2e-summary.md
        echo "" >> e2e-summary.md
        
        if [ "${{ needs.e2e-test.result }}" == "success" ]; then
          echo "✅ **E2E Status: PASSED**" >> e2e-summary.md
          echo "" >> e2e-summary.md
          echo "All end-to-end tests completed successfully:" >> e2e-summary.md
          echo "- Cypress UI tests" >> e2e-summary.md
          echo "- API integration tests" >> e2e-summary.md
          echo "- Performance smoke tests" >> e2e-summary.md
          echo "- Service health validation" >> e2e-summary.md
        else
          echo "❌ **E2E Status: FAILED**" >> e2e-summary.md
          echo "" >> e2e-summary.md
          echo "E2E tests encountered failures. Check the logs for details." >> e2e-summary.md
        fi
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('e2e-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
