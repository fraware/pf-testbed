name: On-Core-Release Workflow

on:
  repository_dispatch:
    types: [core-release]
  workflow_dispatch:
    inputs:
      core_version:
        description: 'Core version to test'
        required: true
        default: 'latest'
      simulate_incompatible:
        description: 'Simulate older incompatible core'
        required: false
        default: 'false'

env:
  CORE_VERSION: ${{ github.event.inputs.core_version || github.event.client_payload.core_version || 'latest' }}
  SIMULATE_INCOMPATIBLE: ${{ github.event.inputs.simulate_incompatible || 'false' }}

jobs:
  pin-core-version:
    name: Pin Core Version
    runs-on: ubuntu-latest
    outputs:
      pinned_version: ${{ steps.pin.outputs.version }}
      compatibility_status: ${{ steps.compatibility.outputs.status }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Pin Core Version
        id: pin
        run: |
          if [ "$SIMULATE_INCOMPATIBLE" = "true" ]; then
            # Simulate older incompatible core
            echo "Simulating incompatible core version..."
            echo "version=v0.1.0" >> $GITHUB_OUTPUT
          else
            # Pin to the actual core version
            echo "Pinning to core version: $CORE_VERSION"
            echo "version=$CORE_VERSION" >> $GITHUB_OUTPUT
            
            # Update Helm values and image tags
            ./scripts/pin_core_version.sh "$CORE_VERSION"
          fi

      - name: Check Compatibility
        id: compatibility
        run: |
          if [ "$SIMULATE_INCOMPATIBLE" = "true" ]; then
            echo "status=incompatible" >> $GITHUB_OUTPUT
            echo "❌ Simulating incompatible core version"
          else
            # Run compatibility check
            npm run test:compatibility
            echo "status=compatible" >> $GITHUB_OUTPUT
            echo "✅ Core version $CORE_VERSION is compatible"
          fi

      - name: Commit pinned version
        if: steps.compatibility.outputs.status == 'compatible'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Pin core version to $CORE_VERSION [skip ci]"
          git push

  test-core-compatibility:
    name: Test Core Compatibility
    needs: pin-core-version
    runs-on: ubuntu-latest
    if: needs.pin-core-version.outputs.compatibility_status == 'compatible'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Start testbed infrastructure
        run: |
          make testbed-up
          # Wait for services to be ready
          sleep 300

      - name: Run comprehensive tests
        run: |
          # Seed data
          make seed
          
          # Run soak tests
          make soak
          
          # Run redteam tests
          make redteam
          
          # Generate report
          make report

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ needs.pin-core-version.outputs.pinned_version }}
          path: |
            reports/
            test-results/
            logs/

      - name: Cleanup testbed
        if: always()
        run: make testbed-down

  release-gate:
    name: Release Gate
    needs: [pin-core-version, test-core-compatibility]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-core-compatibility.result }}" != "success" ]; then
            echo "❌ Core compatibility tests failed"
            echo "Release blocked due to test failures"
            exit 1
          fi
          
          if [ "${{ needs.pin-core-version.outputs.compatibility_status }}" != "compatible" ]; then
            echo "❌ Core version incompatible"
            echo "Release blocked due to compatibility issues"
            exit 1
          fi
          
          echo "✅ All gates passed - release can proceed"

      - name: Create release summary
        if: success()
        run: |
          echo "## Core Release Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Core Version:** ${{ needs.pin-core-version.outputs.pinned_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Compatibility:** ${{ needs.pin-core-version.outputs.compatibility_status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Status:** ${{ needs.test-core-compatibility.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All compatibility gates passed. Release can proceed." >> $GITHUB_STEP_SUMMARY

      - name: Fail release if gates red
        if: failure()
        run: |
          echo "## 🚨 RELEASE BLOCKED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "One or more compatibility gates failed:" >> $GITHUB_STEP_SUMMARY
          echo "- **Pin Core Version:** ${{ needs.pin-core-version.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Compatibility:** ${{ needs.test-core-compatibility.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release is blocked until all gates pass.**" >> $GITHUB_STEP_SUMMARY
          exit 1
